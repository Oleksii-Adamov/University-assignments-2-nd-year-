
const int m = 3;
typedef struct TrNd {int dat;
                     TrNd *s[m];} TrNde, *TrNdp;
int max3(int a, int b, int c)
{
if(a > b && a > c)
return a;
if(b > c)
return b;
return c;
}

int dpth(TrNdp v)
{
	if(!v)
	return 0;
	
	return max3(dpth(v->s[0]),
		    dpth(v->s[1]),
		    dpth(v->s[2])) + 1;
}


int cnt(TrNdp v)
{
	if(!v)
	return 0;
	
	return cnt(v->s[0])+
	       cnt(v->s[1])+
	       cnt(v->s[2])) + 1;
}

int cnt2(TrNdp v)
{
	if(!v)
		return 0;
	if(!v->s[0] && !v->s[1] && !v->s[2])
		return 1;
	
	return cnt2(v->s[0])+
	       cnt2(v->s[1])+
	       cnt2(v->s[2]));
}

TrNdp copy(TrNdp v, int m)
{
	if(!v)
	return NULL;

	TrNdp cv = new TrNde;
	cv -> dat = v -> dat;
	for(int i = 0 ; i < m ; ++i)
		cv->s[i] = copy(v->s[i]);
	
	return cv;
}


void del(TrNdp v)
{
	if(v)
	{
		for(int i = 0 ; i < m ; ++i)
			del(v->s[i]);
		
		delete v;
	}
}


int f(TrNdp p){
  int cnt = 0;
  push(p);
  while(sp){
    if (p = pop()) {
           cnt++;
           for (int i=m-1; i>=0; i--)
              push(p->s[i]);  //занесення у стек
       }
  }
  return cnt;
}

int f2(TrNdp p){
  if(!p) return 0;
  int cnt = 0;
  push(p);
  while(sp){
           p = pop();
           cnt++;
           for (int i=m-1; i>=0; i--)
           if(p->s[i])
              push(p->s[i]);  //занесення у стек
       
  }
  return cnt;
}

void o(TrNdp p)
{
  if(!p) return 0;
  
  push_q(p);
  while(sp){
           p = pop_q();
           cout << p->dat << " ";
           for (int i=0; i<m; i++)
           if(p->s[i])
              push_q(p->s[i]);  //занесення у стек
       
  }
}


// обхід дерева в оберненому порядку
void o2(TrNdp p)
{
  if(!p) return;
  
  push_stack(p, 0);

  while(!stack_empty)
  {
           (p,i) = stack_pop;
	   if(i == m){ 
	   	cout << p->dat << " ";
 	   }
	   else{
		push_stack(p, i+1);
		if(p->s[i])
			push_stack(p->s[i], 0);
	   }
  }
}







